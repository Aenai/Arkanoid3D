#include "PlayState.h"
#include "PauseState.h"
#include "CollisionableObject.h"
#include <math.h> /*fabs*/
#include <SDL/SDL.h>
#include <SDL/SDL_mixer.h>

using namespace Ogre;

template<> PlayState* Ogre::Singleton<PlayState>::msSingleton = 0;

void PlayState::enter ()
{
	initSDL ();
	_root = Ogre::Root::getSingletonPtr();

	// Se recupera el gestor de escena y la cÃ¡mara.
	_sceneMgr = _root->getSceneManager("SceneManager");
	_camera = _sceneMgr->getCamera("IntroCamera");
	_viewport = _root->getAutoCreatedWindow()->addViewport(_camera);
	
	//Camera configuration
	_camera->lookAt(Vector3(0, -15, -30));
	_camera->setNearClipDistance(0.1);
	_camera->setFarClipDistance(100);
	
	// Nuevo background colour.
	_viewport->setBackgroundColour(Ogre::ColourValue(0.0, 0.0, 0.0));

	//Paddle Initialization
	Ogre::Entity* ent1 = _sceneMgr->createEntity("playerPaddle", "PaddleMesh.mesh");
	ent1->setQueryFlags(PLAYER);
	_paddle = _sceneMgr->createSceneNode("playerPaddle");
	_paddle->attachObject(ent1);
	_sceneMgr->getRootSceneNode()->addChild(_paddle);
	_paddle->setScale(1,1,1);
	_paddle->setPosition(0,-35,-40);

	//Bottom initialization
	ent1 = _sceneMgr->createEntity("bottom", "cube.mesh");
  ent1->setMaterialName("bottom");
  Ogre::SceneNode* bottom = _sceneMgr->createSceneNode("bottom");
	bottom->attachObject(ent1);
	_sceneMgr->getRootSceneNode()->addChild(bottom);
	bottom->setScale(60,60,1);
	bottom->setPosition(0,-15,-55);
	//Ball initialization
	ent1 = _sceneMgr->createEntity("ball", "BallMesh.mesh");
	_ball = _sceneMgr->createSceneNode("ball");
	_ball->attachObject(ent1);
	_sceneMgr->getRootSceneNode()->addChild(_ball);
	_ball->setScale(1,1,1);
	_ball->setPosition(0,-26,-40);
	playBall = new Ball(_ball);
	
	//GhostBall initialization
	ent1 = _sceneMgr->createEntity("ballG", "Cube.001.mesh");
	_ball = _sceneMgr->createSceneNode("ballG");
	_ball->attachObject(ent1);
	_sceneMgr->getRootSceneNode()->addChild(_ball);
	_ball->setScale(1,1,1);
	_ball->setPosition(0,-26,-40);
	_ghostBall = new GhostBall(_ball);
	
	//Record Manager
	_recordMgr = new RecordManager();

	//IA
	_IAmgr = new IAManager(playBall, _ghostBall, _paddle);


	//Block Manager initialization
	_blockMgr = new BlockContainer(_sceneMgr, _recordMgr, playBall, _ghostBall, _IAmgr);
	//Sound Managers
  
	_pTrackManager = new TrackManager;
  	_pSoundFXManager = new SoundFXManager;
  	(_pTrackManager->load("lightintro.ogg"))->play();

 

	//Inicializar variables
	_DRight = false;
	_DLeft = false;
	std::vector<int> bestLevel = _recordMgr->getRecords();
	if(bestLevel.empty()){
		_level = 0;
	}else{
		_level = bestLevel[1];
	}
	
	
	_yCollisionCheck = -100;
	_yMinBall = 100;
	_lifes = 3;
	_gameOver = false;
	
	//Level
	levelGenerator ();
	_freezeTimer = Ogre::Timer();

	//Inicializamos el HUD
	createHUD();
	
	updateVariables();
	playBall->startMatch(_level); //FIXME temporary call method

	_exitGame = false;
}

void PlayState::exit ()
{
	_sceneMgr->clearScene();
	_root->getAutoCreatedWindow()->removeAllViewports();
}

void PlayState::pause()
{
	_DRight = false;
	_DLeft = false;
}

void PlayState::resume()
{
	// Se restaura el background colour.
	_viewport->setBackgroundColour(Ogre::ColourValue(0.0, 0.0, 1.0));
}


//================Frame Control====================

bool PlayState::frameStarted (const Ogre::FrameEvent& evt)
{
	if(_freezeTimer.getMilliseconds() > 1500 && _lifes > 0){
		playBall->update(evt); //Ball Movement Logic
		_ghostBall->update(evt);
		updateVariables();
		_blockMgr->checkCollision(); //All blocks colliding logic with Ball
		_IAmgr->update(evt, _blockMgr->getObjectiveX());
	
		float _xBall = _ball->getPosition().x;
	
		//Game Over Control
		if(playBall->getY() < -45){
			_freezeTimer = Ogre::Timer();
			_lifes--;
			switch(_lifes)
			{
				case 0:
					CEGUI::MouseCursor::getSingleton().show( );
					CEGUI::WindowManager::getSingleton().getWindow("FormatWin/Text3")->setText("[vert-alignment='centre'][image-size='w:100 h:35'][image='set:ArkaGraf image:ImgHeart0']");
					GameOver();
					_gameOver = true;
					break;
				case 1:
					CEGUI::WindowManager::getSingleton().getWindow("FormatWin/Text3")->setText("[vert-alignment='centre'][image-size='w:100 h:35'][image='set:ArkaGraf image:ImgHeart1']");
					break;
				case 2:
					CEGUI::WindowManager::getSingleton().getWindow("FormatWin/Text3")->setText("[vert-alignment='centre'][image-size='w:100 h:35'][image='set:ArkaGraf image:ImgHeart2']");
					break;
			}
			restartBall();
		}
		
		//Win Control
		if(_blockMgr->levelFinished()){
			_level++;
			_recordMgr->keepRecord(_recordMgr->getPoints(), _level);
			_freezeTimer = Ogre::Timer();
			restartBall();
			levelGenerator();
			CEGUI::WindowManager::getSingleton().getWindow("FormatWin/Text2")->setText("[vert-alignment='centre']" + StringConverter::toString(_level));
			_lifes = 3;
		}
	
		//FIXME temporary until class PADDLE is finished
		CollisionableObject* obj = new CollisionableObject(_paddle, playBall, _ghostBall);
		obj->updateVariables();
		obj->checkCollision();
	
		//Wall Collision
		if(playBall->getX() > XRIGHTWALL){
			(_pSoundFXManager->load("all.wav"))->play();
			playBall->rightCollisionWall();
		}else if (playBall->getX() < XLEFTWALL){
			(_pSoundFXManager->load("all.wav"))->play();
			playBall->leftCollisionWall();
		}
		
		if(_ghostBall->getX() > XRIGHTWALL){
			_ghostBall->rightCollisionWall();
		}else if (_ghostBall->getX() < XLEFTWALL){
			_ghostBall->leftCollisionWall();
		}
	
		//Top Collision
		if(playBall->getY() > TOP){
			(_pSoundFXManager->load("all.wav"))->play();
			playBall->topCollision();
		}
		
		if(_ghostBall->getY() > TOP){
			_ghostBall->topCollision();
		}
	
	}
	return true;
}

bool PlayState::frameEnded (const Ogre::FrameEvent& evt)
{
	if (_exitGame)
		return false;
	else
		paddleMove();
		

	return true;
}

void PlayState::keyPressed (const OIS::KeyEvent &e)
{
	// Tecla p --> PauseState.
	if (e.key == OIS::KC_P) {
		pushState(PauseState::getSingletonPtr());
	}

	if (e.key == OIS::KC_RIGHT or e.key == OIS::KC_D){
		//_sceneMgr->getSceneNode("playerPaddle")->translate(Vector3(1, 0, 0));
		_DRight = true;
	}
	if (e.key == OIS::KC_LEFT or e.key == OIS::KC_A){
		//_sceneMgr->getSceneNode("playerPaddle")->translate(Vector3(-1, 0, 0));
		_DLeft = true;
	}
	
	if(e.key == OIS::KC_X){
		_recordMgr->getRecords();
	  }
}

void PlayState::keyReleased (const OIS::KeyEvent &e)
{
	_IAmgr->keyReleased(e);
	if (e.key == OIS::KC_ESCAPE) {
		_exitGame = true;
	}

	if (e.key == OIS::KC_RIGHT or e.key == OIS::KC_D){
		_DRight = false;
	}
	if (e.key == OIS::KC_LEFT or e.key == OIS::KC_A){
		_DLeft = false;
	}
}

void PlayState::mouseMoved (const OIS::MouseEvent &e)
{
	if(_gameOver == false){
		Real posx = e.state.X.rel;
		Ogre::Vector3 vt(0, 0, 0);
		if (posx > 0){
			if (_paddle->getPosition().x < XRIGHTWALL) vt += Ogre::Vector3(1, 0, 0);
				//_DRight = true;
				//_DLeft = false;
		}
		if (posx < 0){
			if (_paddle->getPosition().x > XLEFTWALL) vt += Ogre::Vector3(-1, 0, 0);
			//_DRight = false;
			//_DLeft = true;
		}
		if (posx == 0){
			_DRight = false;
			_DLeft = false;	
		}
		_paddle->translate(vt);
	}else{
		CEGUI::System::getSingleton().injectMouseMove(e.state.X.rel, e.state.Y.rel);
	}
}

void PlayState::mousePressed (const OIS::MouseEvent &e, OIS::MouseButtonID id)
{
	CEGUI::System::getSingleton().injectMouseButtonDown(convertMouseButton(id));
}

void PlayState::mouseReleased (const OIS::MouseEvent &e, OIS::MouseButtonID id)
{
	CEGUI::System::getSingleton().injectMouseButtonUp(convertMouseButton(id));
}

CEGUI::MouseButton PlayState::convertMouseButton(OIS::MouseButtonID id)
{
	CEGUI::MouseButton ceguiId;
	switch(id)
	{
		case OIS::MB_Left:
			ceguiId = CEGUI::LeftButton;
			break;
		case OIS::MB_Right:
			ceguiId = CEGUI::RightButton;
			break;
		case OIS::MB_Middle:
			ceguiId = CEGUI::MiddleButton;
			break;
		default:
			ceguiId = CEGUI::LeftButton;
	}
	return ceguiId;
}

PlayState* PlayState::getSingletonPtr ()
{
	return msSingleton;
}

PlayState& PlayState::getSingleton ()
{ 
	assert(msSingleton);
	return *msSingleton;
}

void PlayState::paddleMove ()
{
	Ogre::Vector3 vt(0, 0, 0);
	
	
	if (_DRight){
		if (_paddle->getPosition().x < XRIGHTWALL) vt += Ogre::Vector3(1, 0, 0);
	}
	if (_DLeft){
		if (_paddle->getPosition().x > XLEFTWALL) vt += Ogre::Vector3(-1, 0, 0);
	}

	_paddle->translate(vt);

}

void PlayState::updateVariables(){
	//Paddle Max
  	Ogre::Entity* boardEntity = static_cast<Ogre::Entity*>(_paddle->getAttachedObject(0));
	Ogre::AxisAlignedBox charAABB = boardEntity->getWorldBoundingBox();
	Ogre::Vector3 min = charAABB.getMinimum();
	Ogre::Vector3 max = charAABB.getMaximum();
	Ogre::Vector3 size( fabs( max.x - min.x), fabs( max.y - min.y), fabs( max.z - min.z ) );
	_yCollisionCheck = max.y;
	_paddleHalfWidth = size[0] / 2;
	
	//Ball Min
	boardEntity = static_cast<Ogre::Entity*>(_ball->getAttachedObject(0));
	charAABB = boardEntity->getWorldBoundingBox();
	min = charAABB.getMinimum();
	max = charAABB.getMaximum();
	_yMinBall = min.y;
	_yMaxBall = max.y;
	
	//std::cout << "_yColl: " << _yCollisionCheck << " _yMin: " << _yMinBall << std::endl;
}

void PlayState::levelGenerator () {
	_blockMgr->levelGenerator(_level);
}

bool PlayState::checkInRange(float participant, float center, float range){
	return (participant > center - range && participant < center + range);
}

bool PlayState::initSDL () {
    // Inicializando SDL...
    if (SDL_Init(SDL_INIT_AUDIO) < 0)
        return false;
    // Llamar a  SDL_Quit al terminar.
    atexit(SDL_Quit);
 
    // Inicializando SDL mixer...
    if (Mix_OpenAudio(MIX_DEFAULT_FREQUENCY, MIX_DEFAULT_FORMAT,MIX_DEFAULT_CHANNELS, 4096) < 0)
      return false;
 
    // Llamar a Mix_CloseAudio al terminar.
    atexit(Mix_CloseAudio);
 
    return true;    
}

void PlayState::restartBall(){
	playBall->startMatch(_level);
	_ghostBall->setSpeed(playBall->getXSpeed()*2, playBall->getYSpeed()*2);
	_ghostBall->setPosition(playBall->getPosition());
}

void PlayState::createHUD(){
	//Sheet
	CEGUI::Window* sheet = CEGUI::WindowManager::getSingleton().createWindow("DefaultWindow","HUDWin");

	//Config Window
	CEGUI::Window* formatWin = CEGUI::WindowManager::getSingleton().loadWindowLayout("HUD.layout");

	//Setting Text!
	CEGUI::WindowManager::getSingleton().getWindow("FormatWin/Text1")->setText("[vert-alignment='centre']Nivel ");
	CEGUI::WindowManager::getSingleton().getWindow("FormatWin/Text2")->setText("[vert-alignment='centre']" + StringConverter::toString(_level));
	CEGUI::WindowManager::getSingleton().getWindow("FormatWin/Text3")->setText("[vert-alignment='centre'][image-size='w:100 h:35'][image='set:ArkaGraf image:ImgHeart3']");
	
	//Attaching buttons
	sheet->addChildWindow(formatWin);
	CEGUI::System::getSingleton().setGUISheet(sheet);
}

void PlayState::GameOver(){
	//Sheet
	CEGUI::Window* sheet = CEGUI::WindowManager::getSingleton().createWindow("DefaultWindow","GameOverWin");

	//Config Window
	CEGUI::Window* formatWin = CEGUI::WindowManager::getSingleton().loadWindowLayout("MenuGameOver.layout");

	//Setting Text!
	CEGUI::WindowManager::getSingleton().getWindow("FormatWin/TextGameOver")->setText("[vert-alignment='centre']GAME OVER ");

	//NewGame Window
	CEGUI::Window* newGameButton = CEGUI::WindowManager::getSingleton().getWindow("FormatWin/NewButton");
	newGameButton->subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&PlayState::newGame, this));

	//Reset Window
	CEGUI::Window* resetButton = CEGUI::WindowManager::getSingleton().getWindow("FormatWin/ResetButton");
	resetButton->subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&PlayState::reStart, this));

	//Return Window
	//CEGUI::Window* returnButton = CEGUI::WindowManager::getSingleton().getWindow("FormatWin/ReturnButton");
	//returnButton->subscribeEvent(CEGUI::PushButton::EventClicked, CEGUI::Event::Subscriber(&IntroState::option, this));

	//Attaching buttons
	sheet->addChildWindow(formatWin);
	CEGUI::System::getSingleton().setGUISheet(sheet);
}

bool PlayState::newGame(const CEGUI::EventArgs &e){
	
	CEGUI::WindowManager::getSingletonPtr()->destroyWindow("GameOverWin");
	CEGUI::WindowManager::getSingletonPtr()->destroyWindow("HUDWin");
	CEGUI::MouseCursor::getSingleton().hide( );
	_level = 1;
	_lifes = 3;
	_gameOver = false;
	_freezeTimer = Ogre::Timer();
	_blockMgr->levelGenerator(1);
	createHUD();
	return true;
}

bool PlayState::reStart(const CEGUI::EventArgs &e){
	
	CEGUI::WindowManager::getSingletonPtr()->destroyWindow("GameOverWin");
	CEGUI::WindowManager::getSingletonPtr()->destroyWindow("HUDWin");
	CEGUI::MouseCursor::getSingleton().hide( );
	_lifes = 3;
	_gameOver = false;
	_freezeTimer = Ogre::Timer();
	_blockMgr->levelGenerator(_level);
	createHUD();
	return true;
}

